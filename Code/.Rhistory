week_end=tail(df$DIA_SEMANA, 140)
week_end[week_end < 6] <- 0
week_end[week_end > 5] <- 1
start= 7*(week-1)
end = week*7
week_end = week_end[start:end]
bud=bud_pred$Pred[start:end]
stella=stella_pred$Pred[start:end]
drink_input=c()
week_input=c()
for(i in 1:length(bud)){
drink_input = c(drink_input, bud[i])
drink_input = c(drink_input, stella[i])
}
drink_input[drink_input < 0] = 0
plot(bud_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
plot(stella_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
return(list(drink_input=drink_input, week_end=week_end))
}
input = model()
input
model = function(week=1, bud_model="ets", stella_model="pcr"){
bud_pred = best_model(model=bud_model, type=1)
stella_pred = best_model(model=stella_model, type=0)
week_end=tail(df$DIA_SEMANA, 140)
week_end[week_end < 6] <- 0
week_end[week_end > 5] <- 1
start= 7*(week-1)
end = week*7
week_end = week_end[start:end]
bud=bud_pred$Pred[start:end]
stella=stella_pred$Pred[start:end]
drink_input=c()
week_input=c()
for(i in 1:length(bud)){
drink_input = c(drink_input, bud[i])
drink_input = c(drink_input, stella[i])
}
drink_input[drink_input < 0] = 0
plot(bud_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
plot(stella_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
return(list(drink_input=drink_input, week_end=week_end))
}
input = model()
input
model = function(week=1, bud_model="ets", stella_model="pcr"){
bud_pred = best_model(model=bud_model, type=1)
stella_pred = best_model(model=stella_model, type=0)
week_end=tail(df$DIA_SEMANA, 140)
week_end[week_end < 6] <- 0
week_end[week_end > 5] <- 1
start= 7*(week-1)
end = week*7
week_end = week_end[start:end]
bud=bud_pred$Pred[start:end]
stella=stella_pred$Pred[start:end]
drink_input=c()
week_input=c()
for(i in 1:length(bud)){
drink_input = c(drink_input, bud[i])
drink_input = c(drink_input, stella[i])
}
drink_input[drink_input < 0] = 0
plot(bud_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
plot(stella_pred$ev, type = "o", xlab = "Week", ylab = "MSE")
return(list(drink_input=drink_input, week_end=week_end))
}
input = model(week = 2, bud_model="ets", stella_model="pcr")
input
f_models = list(
"HW" = function(x, h) {return(forecast(HoltWinters(x), h = h)$mean[1:h])},
"ets" = function(x, h) {return(forecast(ets(x, alpha = 0.2), h = h)$mean[1:h])},
"arima" = function(x, h) {return(forecast(auto.arima(x), h = h)$mean[1:h])},
"nnectar" = function(x, h) {return(forecast(nnetar(x,P=1,repeats=3), h = h)$mean[1:h])}
)
A= best_model(type=1, model="ets")
mean(A$ev)
f_models = list(
"HW" = function(x, h) {return(forecast(HoltWinters(x), h = h)$mean[1:h])},
"ets" = function(x, h) {return(forecast(ets(x), h = h)$mean[1:h])},
"arima" = function(x, h) {return(forecast(auto.arima(x), h = h)$mean[1:h])},
"nnectar" = function(x, h) {return(forecast(nnetar(x,P=1,repeats=3), h = h)$mean[1:h])}
)
A= best_model(type=1, model="ets")
mean(A$ev)
A= best_model(type=1, model="ets")
mean(A$ev)
A
best_model = function(model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
Pred = c()
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
for(b in 1:Runs)
{
H=holdout(TS,ratio=Test,mode=mode,iter=b,window=W,increment=S)
trinit=H$tr[1]
dtr=ts(TS[H$tr],frequency=K)
P=round(suppressWarnings(f_models[[model]](x = dtr, h = Test)),0)
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
Pred = c(Pred, P)
}
}else{
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = round(suppressWarnings(ml_models[[model]](S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test)), 0)
P[P < 0] = 0
Pred = c(Pred, P)
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
}
}
print(Pred)
print(TS[H$ts])
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
print(b)
return(list(ev = ev, Pred= Pred))
}
f_models = list(
"HW" = function(x, h) {return(forecast(HoltWinters(x), h = h)$mean[1:h])},
"ets" = function(x, h) {return(forecast(ets(x), h = h)$mean[1:h])},
"arima" = function(x, h) {return(forecast(auto.arima(x), h = h)$mean[1:h])},
"nnectar" = function(x, h) {return(forecast(nnetar(x,P=1,repeats=3), h = h)$mean[1:h])}
)
A= best_model(type=1, model="ets")
mean(A$ev)
best_model = function(model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
Pred = c()
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
for(b in 1:Runs)
{
H=holdout(TS,ratio=Test,mode=mode,iter=b,window=W,increment=S)
trinit=H$tr[1]
dtr=ts(TS[H$tr],frequency=K)
P=round(suppressWarnings(f_models[[model]](x = dtr, h = Test)),0)
P[P < 0] = 0
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
Pred = c(Pred, P)
}
}else{
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = round(suppressWarnings(ml_models[[model]](S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test)), 0)
P[P < 0] = 0
Pred = c(Pred, P)
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
}
}
print(Pred)
print(TS[H$ts])
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
print(b)
return(list(ev = ev, Pred= Pred))
}
source("Split.R")
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
lags=1:7
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
write.csv(rank_metrics, "metrics/stella_g_1_7.csv")
metrics = model_f_rg(type=1, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
stella_metrics = read.csv("metrics/stella_g_1_7.csv")
stella_metrics
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
write.csv(rank_metrics, "metrics/bud_g_1_7.csv")
stella_metrics = read.csv("metrics/stella_g_1_7.csv")
bud_metrics = read.csv("metrics/bud_g_1_7.csv")
stella_metrics
bud_metrics
best_model()
best_model(model="lm", type=1)
best_model(model="lm", type=0)
library(openxlsx)
library(rminer)
df = read.xlsx(xlsxFile = "bebidas.xlsx", sheet=1, skipEmptyRows = FALSE,colNames = TRUE,detectDates = TRUE)
class(df[,1])
summary(df)
S = df$BUD
NPRED = 14
lags = 7
DS=CasesSeries(S,c(1:lags))
srange=diff(range(S))
N=nrow(DS) # number of D examples
NTR=N-NPRED
TR=1:NTR # training row elements of D (oldest elements), excluding last NPRED rows
TS=(NTR+1):N
# fit a random forest
mpause("fit a random forest (randomForest):")
PRF=predict(RF,DS[TS,])
Y=DS[TS,]$y # real observed values
cat("RF predictions:\n")
print(PRF)
cat("MAE:",mmetric(Y,PRF,metric="MAE"),"\n")
cat("NMAE:",mmetric(Y,PRF,metric="NMAE",val=srange),"\n")
cat("RMSE:",mmetric(Y,PRF,metric="RMSE"),"\n")
cat("RRSE:",mmetric(Y,PRF,metric="RRSE"),"\n")
df = read.xlsx(xlsxFile = "bebidas.xlsx", sheet=1, skipEmptyRows = FALSE,colNames = TRUE,detectDates = TRUE)
class(df[,1])
summary(df)
S = df$BUD
acf(S)
S = df$STELLA
acf(S)
#metrics of forecast and ml models
model_f_ml = function(f_model_n, ml_model_n, type=1, NP=140, lags=1:7){
ts = split(type=type, NP=NP, lags=lags)
f_ts = split_ts(type=type,H=NP,K=7)
n_ml_model = length(ml_model_n)
n_f_model = length(f_model_n)
n_total_model = n_ml_model + n_f_model
df_metrics = data.frame(matrix(ncol = 2, nrow = n_total_model))
colnames(df_metrics) = c("Model", "RMSE")
ml_metrics = model_rminer(model = ml_model_n, ts=ts, NP=NP)
f_metrics = model_f(ts=f_ts, model_n = f_model_n, h=NP)
return(list(ml=ml_metrics, f=f_metrics))
}
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
model_f_ml(f_model_n=f_model_n, ml_model_n = ml_model_n)
A = model_f_ml(f_model_n=f_model_n, ml_model_n = ml_model_n)
A
concatenated_table <- rbind(A$ml, A$f)
# Order by RMSE
ordered_table <- concatenated_table[order(concatenated_table$RMSE), ]
# Print the ordered table
print(ordered_table)
#metrics of forecast and ml models
model_f_ml = function(f_model_n, ml_model_n, type=1, NP=140, lags=1:7){
ts = split(type=type, NP=NP, lags=lags)
f_ts = split_ts(type=type,H=NP,K=7)
n_ml_model = length(ml_model_n)
n_f_model = length(f_model_n)
n_total_model = n_ml_model + n_f_model
df_metrics = data.frame(matrix(ncol = 2, nrow = n_total_model))
colnames(df_metrics) = c("Model", "RMSE")
ml_metrics = model_rminer(model = ml_model_n, ts=ts, NP=NP)
f_metrics = model_f(ts=f_ts, model_n = f_model_n, h=NP)
cat_metrics = rbind(ml_metrics, f_metrics)
ordered_metrics = cat_metrics[order(cat_metrics$RMSE), ]
return(ordered_metrics)
}
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
metrics = model_f_ml(f_model_n, ml_model_n)
metrics
metrics = model_f_ml(type=0, f_model_n, ml_model_n)
metrics
A = select_split_model(model = "mlpe")
select_split_model = function(model, type=1, NP=140, lags=1:7, K=7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
f_ts = split_ts(type=type,H=NP,K=7)
P=round(suppressWarnings(f_models[[model]](x = f_ts$TR, h = NP)),0)
P[P < 0] = 0
RMSE = round(mmetric(ts$Y,P,metric="RMSE"),1)
Pred = P
}else{
ts = split(type=type, NP=NP, lags=lags)
}
print(Pred)
print(TS[H$ts])
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
print(b)
return(list(ev = ev, Pred= Pred))
}
A = select_split_model(model = "mlpe")
A = select_split_model(model = "ets")
select_split_model = function(model, type=1, NP=140, lags=1:7, K=7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
f_ts = split_ts(type=type,H=NP,K=7)
P=round(suppressWarnings(f_models[[model]](x = f_ts$TR, h = NP)),0)
P[P < 0] = 0
RMSE = round(mmetric(f_ts$Y,P,metric="RMSE"),1)
Pred = P
}else{
ts = split(type=type, NP=NP, lags=lags)
}
print(Pred)
print(TS[H$ts])
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
print(b)
return(list(ev = ev, Pred= Pred))
}
A = select_split_model(model = "ets")
select_split_model = function(model, type=1, NP=140, lags=1:7, K=7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
f_ts = split_ts(type=type,H=NP,K=7)
P=round(suppressWarnings(f_models[[model]](x = f_ts$TR, h = NP)),0)
P[P < 0] = 0
RMSE = round(mmetric(f_ts$Y,P,metric="RMSE"),1)
Pred = P
}else{
ts = split(type=type, NP=NP, lags=lags)
}
print(Pred)
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
print(b)
return(list(ev = ev, Pred= Pred))
}
A = select_split_model(model = "ets")
select_split_model = function(model, type=1, NP=140, lags=1:7, K=7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
f_ts = split_ts(type=type,H=NP,K=7)
P=round(suppressWarnings(f_models[[model]](x = f_ts$TR, h = NP)),0)
P[P < 0] = 0
ev = round(mmetric(f_ts$Y,P,metric="RMSE"),1)
Pred = P
}else{
ts = split(type=type, NP=NP, lags=lags)
}
print(Pred)
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
return(list(ev = ev, Pred= Pred))
}
A = select_split_model(model = "ets")
A
select_split_model = function(model, type=1, NP=140, lags=1:7, K=7){
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
set.seed(24)
#Check if is ML or Forecasting model
if(model %in% f_model_n) {
f_ts = split_ts(type=type,H=NP,K=7)
P=round(suppressWarnings(f_models[[model]](x = f_ts$TR, h = NP)),0)
P[P < 0] = 0
ev = round(mmetric(f_ts$Y,P,metric="RMSE"),1)
Pred = P
}else{
ts = split(type=type, NP=NP, lags=lags)
P = round(suppressWarnings(ml_models[[model]](S = ts$S,x= ts$TR, init = (length(ts$TR)+1), NP=NP)), 0)
P[P < 0] = 0
ev = round(mmetric(ts$Y,P,metric="RMSE"),1)
Pred = P
}
print(Pred)
# Print all the predictions
mgraph(tail(TS, 140),Pred,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",model)))
return(list(ev = ev, Pred= Pred))
}
A = select_split_model(model = "mlpe")
P_stella = select_split_model(best_split_bud_model, type=0,mode=mode, K=K, timelags=lags)
source("Split.R")
library(tictoc)
type = 0 # (BUD) else (STELLA)
NP=140
lags=c(1:7)
#lags=(1:14)
#lags=c(1,2,3,7)
mode="incremental"
K=7
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
# Run by each model
best_g_stella_model="lm"
best_g_bud_model="lm"
best_split_bud_model="mars"
best_split_stella_model="HW"
P_stella = select_split_model(best_split_bud_model, type=0,mode=mode, K=K, timelags=lags)
("Split.R")
("Split.R")
source("Split.R")
library(tictoc)
tic()
type = 0 # (BUD) else (STELLA)
NP=140
lags=c(1:7)
#lags=(1:14)
#lags=c(1,2,3,7)
mode="incremental"
K=7
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
# Run by each model
best_g_stella_model="lm"
best_g_bud_model="lm"
best_split_bud_model="mars"
best_split_stella_model="HW"
P_stella = select_split_model(best_split_bud_model, type=0,mode=mode, K=K, lags=lags)
P_stella = select_split_model(best_split_bud_model, type=0,mode=mode, K=K, lags=lags)
P_stella = select_split_model(best_split_bud_model, type=0,mode=mode, K=K, lags=lags)
A = select_split_model(model = "ets")
source("Split.R")
library(tictoc)
tic()
type = 0 # (BUD) else (STELLA)
NP=140
lags=c(1:7)
#lags=(1:14)
#lags=c(1,2,3,7)
mode="incremental"
K=7
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
# Run by each model
best_g_stella_model="lm"
best_g_bud_model="lm"
source("Split.R")
library(tictoc)
tic()
type = 0 # (BUD) else (STELLA)
NP=140
lags=c(1:7)
#lags=(1:14)
#lags=c(1,2,3,7)
mode="incremental"
K=7
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n=c("HW", "auto.arima", "ets", "nnetar")
# Run by each model
best_g_stella_model="lm"
best_g_bud_model="lm"
best_split_bud_model="mars"
best_split_stella_model="HW"
P_stella = select_split_model(model=best_split_bud_model, type=0,mode=mode, K=K, lags=lags)
P_stella = select_split_model(model=best_split_bud_model, type=0, K=K, lags=lags)
P_G_stella = select_model(best_g_stella_model, type=0,mode=mode, K=K, lags=lags)
P_bud = select_split_model(model=best_split_bud_model, type=1, K=K, lags=lags)
P_G_bud = select_model(best_g_stella_model, type=1,mode=mode, K=K, lags=lags)
P_stella = select_split_model(model=best_split_bud_model, type=0, K=K, lags=lags)
P_stella = select_split_model(model=best_split_bud_model, type=0, K=K, lags=lags)
P_bud = select_split_model(model=best_split_bud_model, type=1, K=K, lags=lags)
P_stella = select_split_model(model=best_split_stella_model, type=0, K=K, lags=lags)
P_G_bud = select_model(best_g_bud_model, type=1,mode=mode, K=K, lags=lags)
P_stella = select_split_model(model=best_split_stella_model, type=0, K=K, lags=lags)
P_G_stella = select_model(best_g_stella_model, type=0,mode=mode, K=K, lags=lags)
P_bud = select_split_model(model=best_split_bud_model, type=1, K=K, lags=lags)
P_G_bud = select_model(best_g_bud_model, type=1,mode=mode, K=K, lags=lags)
source("split.R")
source("1.predict.R")
