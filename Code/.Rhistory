source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
summary(iris)
plot(iris)
detach("package:datasets", unload = TRUE)
dev.off()
4+3
intall.packages('tidyverse')
install.packages("tidyverse")
install.packages("corrrplot")
library(rminer) # powerful rminer
library(rpart.plot) # plot nice decision trees
library(tictoc) # timer
?print()
textToPrint <- "this is some text"
textToPrint
print(textoToPrint)
print(textToPrint)
nchar(textToPrint)
c(textToPrint)
c(textToPrint, textToPrint)
a <- 'some'
str(a)
library(tidyverse)
library(rminer)
library(tictoc)
install.packages("rminer")
library(rminer)
library(xgboost)
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
library(rminer) # powerful rminer
library(rpart.plot) # plot nice decision trees
library(tictoc) # timer
library(rminer)
getwd()
demo()
demo(graphics)
getwd()
install.packages("rminer")
library(rminer)
ls()
setdw(C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
setwd("C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments")
setwd("C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments")
setwd(C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
setwd(\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
help(setwd)
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
AirPassengers
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(AirPassengers,FUN=mean)
plot(aggregate(AirPassengers,FUN=mean))
bloxplot(AirPassengers~cycle(AirPassengers))
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.testadf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
log(AirPassengers)
diff(log(AirPassengers))
?diff
dts = c("1989-09-28", "2001-01-15", "2004-08-30", "1990-02-09")
dts
tms = c(  "23:12:55",   "10:34:02",   "08:30:00",   "11:18:23")
tms
GMT = timeDate(dts, zone = "GMT", FinCenter = "GMT") + 24*3600
GMT
library(timeDate)
GMT = timeDate(dts, zone = "GMT", FinCenter = "GMT") + 24*3600
GMT
diff(GMT)
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
install.packages("summarytools")
install.packages("tseries")
install.packages("forecast")
library(forecast)
library(forecast)
library(ggplot2)
library(tseries)
library(summarytools)
#Reading the Airpaseengers data
data("AirPassengers")
install.packages("tseries")
tsdata<-AirPassengers
#Identifying the class of data
class(tsdata)
#Observations of the time series data
tsdata
#Summary of the data and missi
dfSummary(tsdata)
as.data.frame(tsdata)
cycle(tsdata)
plot(tsdata, ylab="Passengers (1000s)", type="o")
#Decomposing the data into its trend, seasonal, and random error components
tsdata_decom <- decompose(tsdata, type = "multiplicative")
plot(tsdata_decom)
#Testing the stationarity of the data
#Augmented Dickey-Fuller Test
adf.test(tsdata)
#Autocorrelation test
autoplot(acf(tsdata,plot=FALSE))+ labs(title="Correlogram of Air Passengers data")
tsdata_decom$random
autoplot(acf(tsdata_decom$random[7:138],plot=FALSE))+ labs(title="Correlogram of Air Passengers Random Component")
#ARIMA Model
arimats <- auto.arima(tsdata)
arimats
ggtsdiag(arimats)
ggtsdiag(arimats)
library(ggplot2)
ggtsdiag(arimats)
#Forecast of Arima Model
fts <- forecast(arimats, level = c(95))
autoplot(fts)
setwd("~/TIA/TIAPOSE/Code")
source("Split.R")
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_model(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(df_metrics)
}
predictions = best_model(ml_model =  ml_model)
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ml_model(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(df_metrics)
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$kknn(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(df_metrics)
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$kknn(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(ev[b])
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
median(predictions)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(ev[b])
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
median(predictions)
median(predictions)
predictions
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
return(ev[b])
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
median(predictions)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
print(b)
return(ev[b])
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
print(b)
return(ev)
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
median(predictions)
best_model = function(ml_model, type=0,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
print(b)
return(ev)
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
median(predictions)
mean(predictions)
best_model = function(ml_model, type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
print(b)
return(ev)
}
ml_model="ksvm"
predictions = best_model(ml_model =  ml_model)
mean(predictions)
mean(1,4,5)
median(1,4,6)
median([1,4,6])
median(c(1,4,6))
mean(c(1,4,6))
?mean
median(c(1,2,6,2,2))
median(c(1,1,10,1,1))
mean(c(1,1,10,1,1))
source("Split.R")
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
ml_model_n=c("ksvm", "cubist", "pcr")
ml_model_n=c("ksvm", "randomForest", "mlpe")
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
lags=1:7
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
weekly_naive= function(type=1){
if(type==1){
DS=df$BUD
} else {
DS=df$STELLA
}
L=length(DS)
ev=vector(length=20)
ini = L - (length(ev)+1) * 7 + 1
for(i in 1:length(ev)){
aux = ini + (i*7) - 7
P = DS[(aux-7):(aux-1)]
Y = DS[aux:(aux+6)]
ev[i] = mmetric(P,Y,metric="MSE")
}
med_ev = mean(ev)
#mgraph(ev,mse$ev,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("weekly Naive","HW pred.","mlpe")))
#lines(mse$ev2,pch=19,cex=0.5,type="b",col="red")
return(list(ev = ev,med_ev= med_ev))
}
source("Split.R")
best_model = function(type=1,mode="incremental", Runs=20, K=7, Test=7, timelags=1:7){
if(type==1){
TS=df$BUD
} else {
TS=df$STELLA
}
S=K
L=length(TS) # 730
W=(L-Test)-(Runs-1)*S
ev=vector(length = Runs)
ev2=vector(length = Runs)
DS=CasesSeries(TS,timelags)
W2=W-max(timelags)
set.seed(24)
for(b in 1:Runs)
{
H=holdout(DS$y,ratio=Test,mode=mode,iter=b,window=W2,increment=S)
P = suppressWarnings(ml_models$ksvm(S = DS,x= DS[H$tr,], init = (length(H$tr)+1), NP=Test))
ev[b]=mmetric(y=TS[H$ts],x=P,metric="MSE")
print(ev[b])
mgraph(TS[H$ts],P,graph="REG",Grid=10,col=c("black","blue","red"),leg=list(pos="topleft",leg=c("target",ml_model)))
}
print(b)
return(ev)
}
predictions = best_model()
source("Split.R")
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
ml_model_n=c("ksvm", "cubist", "pcr")
ml_model_n=c("naive","ctree","cv.glmnet","rpart","kknn","ksvm","mlp","mlpe", "randomForest",
"xgboost", "cubist", "lm", "mr", "mars", "pcr", "plsr", "cppls", "rvm")
f_model_n = c("HW", "auto.arima", "ets", "nnetar")
lags=1:7
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
write.csv(rank_metrics, "metrics/stella_g_1_7.csv")
metrics = model_f_rg(type=1, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
rank_metrics
write.csv(rank_metrics, "metrics/bud_g_1_7.csv")
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
source("Split.R")
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
stella_metrics = read.csv("metrics/stella_g_1_7.csv")
metrics = model_f_rg(type=0, f_model_n = f_model_n, ml_model_n = ml_model_n, mode="incremental", timelags=lags)
rank_metrics = metrics[order(metrics$MSE),]
rank_metrics
write.csv(rank_metrics, "metrics/stella_g_1_7.csv")
stella_metrics = read.csv("metrics/stella_g_1_7.csv")
bud_metrics = read.csv("metrics/bud_g_1_7.csv")
stella_metrics
bud_metrics
