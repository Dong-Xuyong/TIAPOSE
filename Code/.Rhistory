source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
summary(iris)
plot(iris)
detach("package:datasets", unload = TRUE)
dev.off()
4+3
intall.packages('tidyverse')
install.packages("tidyverse")
install.packages("corrrplot")
library(rminer) # powerful rminer
library(rpart.plot) # plot nice decision trees
library(tictoc) # timer
?print()
textToPrint <- "this is some text"
textToPrint
print(textoToPrint)
print(textToPrint)
nchar(textToPrint)
c(textToPrint)
c(textToPrint, textToPrint)
a <- 'some'
str(a)
library(tidyverse)
library(rminer)
library(tictoc)
install.packages("rminer")
library(rminer)
library(xgboost)
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "broom", "bslib", "callr", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "curl", "data.table", "dbplyr", "digest", "evaluate", "fansi", "farver", "forcats", "fs", "gargle", "ggplot2", "gtable", "haven", "highr", "htmltools", "httpuv", "httr", "isoband", "jsonlite", "knitr", "lubridate", "magrittr", "markdown", "mime", "modelr", "openssl", "openxlsx", "plyr", "processx", "ps", "purrr", "RColorBrewer", "Rcpp", "readr", "readxl", "remotes", "reshape", "rio", "rmarkdown", "sass", "scales", "shiny", "sourcetools", "stringi", "stringr", "sys", "tidyr", "tidyverse", "tinytex", "utf8", "viridisLite", "vroom", "withr", "xfun", "yaml", "zip"))
library(rminer) # powerful rminer
library(rpart.plot) # plot nice decision trees
library(tictoc) # timer
library(rminer)
getwd()
demo()
demo(graphics)
getwd()
install.packages("rminer")
library(rminer)
ls()
setdw(C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
setwd("C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments")
setwd("C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments")
setwd(C:\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
setwd(\Users\xuydo\Desktop\My Cloud\Obsidian\Journal\attachments)
help(setwd)
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
AirPassengers
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(AirPassengers,FUN=mean)
plot(aggregate(AirPassengers,FUN=mean))
bloxplot(AirPassengers~cycle(AirPassengers))
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.testadf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
log(AirPassengers)
diff(log(AirPassengers))
?diff
dts = c("1989-09-28", "2001-01-15", "2004-08-30", "1990-02-09")
dts
tms = c(  "23:12:55",   "10:34:02",   "08:30:00",   "11:18:23")
tms
GMT = timeDate(dts, zone = "GMT", FinCenter = "GMT") + 24*3600
GMT
library(timeDate)
GMT = timeDate(dts, zone = "GMT", FinCenter = "GMT") + 24*3600
GMT
diff(GMT)
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
install.packages("summarytools")
install.packages("tseries")
install.packages("forecast")
library(forecast)
library(forecast)
library(ggplot2)
library(tseries)
library(summarytools)
#Reading the Airpaseengers data
data("AirPassengers")
install.packages("tseries")
tsdata<-AirPassengers
#Identifying the class of data
class(tsdata)
#Observations of the time series data
tsdata
#Summary of the data and missi
dfSummary(tsdata)
as.data.frame(tsdata)
cycle(tsdata)
plot(tsdata, ylab="Passengers (1000s)", type="o")
#Decomposing the data into its trend, seasonal, and random error components
tsdata_decom <- decompose(tsdata, type = "multiplicative")
plot(tsdata_decom)
#Testing the stationarity of the data
#Augmented Dickey-Fuller Test
adf.test(tsdata)
#Autocorrelation test
autoplot(acf(tsdata,plot=FALSE))+ labs(title="Correlogram of Air Passengers data")
tsdata_decom$random
autoplot(acf(tsdata_decom$random[7:138],plot=FALSE))+ labs(title="Correlogram of Air Passengers Random Component")
#ARIMA Model
arimats <- auto.arima(tsdata)
arimats
ggtsdiag(arimats)
ggtsdiag(arimats)
library(ggplot2)
ggtsdiag(arimats)
#Forecast of Arima Model
fts <- forecast(arimats, level = c(95))
autoplot(fts)
library(openxlsx)
library(rminer)
setwd("~/TIA/TIAPOSE/Code")
library(stats)
Pred_Lstm = read.csv("LSTM_pred.csv")
Pred_Lstm
Pred_Lstm$X1.450000000000000000e.02
len(Pred_Lstm$X1.450000000000000000e.02)
length(Pred_Lstm$X1.450000000000000000e.02)
Pred_Lstm = read.csv("LSTM_pred.csv", header = FALSE)
length(Pred_Lstm)
length(Pred_Lstm$V1)
source("Split.R")
library(tictoc)
#input for the interface
bud_model="ets"
stella_model="pcr"
week=1
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
week=2
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
P_lstm = read.csv("LSTM_pred.csv", header = FALSE)
source("Split.R")
#input for the interface
bud_model="ctree"
stella_model="ctree"
week=3
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
#input for the interface
bud_model="lstm"
stella_model="lstm"
week=3
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
source("Split.R")
#input for the interface
bud_model="lstm"
stella_model="lstm"
week=3
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
P_lstm$V1
source("Split.R")
#input for the interface
bud_model="lstm"
stella_model="lstm"
week=3
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
source("Split.R")
#input for the interface
bud_model="lstm"
stella_model="lstm"
week=3
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
week=4
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
week=5
input = model(week=week, bud_model=bud_model, stella_model=stella_model)
input
